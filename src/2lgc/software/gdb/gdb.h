/*
 *    Copyright 2018 LE GARREC Vincent
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file gdb.h
 * @brief Class that run gdb for various purpose.
 */

#ifndef SOFTWARE_GDB_GDB_H_
#define SOFTWARE_GDB_GDB_H_

#include <2lgc/compatibility/visual_studio.h>
#include <cstdint>
#include <string>

/**
 * @brief Contains all classes to run and manipulate files generated by GDB.
 */
namespace llgc::software::gdb
{
class GdbServer;
/**
 * @brief Class to run gdb for various purpose.
 */
class Gdb
{
 public:
  /**
   * @brief Run gdb to get the backtrace full. The output will be saved to
   * filename.btfull.
   *
   * @param[in] filename The file that make application crashes.
   * @param[in] argc Number of the arguments.
   * @param[in] argv Argument to run the program with the filename.
   * @param[in] timeout Timeout for the run of gdb.
   * replaced by @@. For example: /bin/prog @@
   *
   * @return true if no problem.
   */
  static bool RunBtFull(const std::string& filename, unsigned int argc,
                        const char* const argv[], int64_t timeout) CHK;

  /**
   * @brief Find recursively all files and run gdb to get the backtrace full.
   *
   * @param[in] folder The root folder.
   * @param[in] nthread Number of parallel of gdb instance.
   * @param[in] regex Regex of the filename.
   * @param[in] argc Number of the arguments
   * @param[in] argv Argument to run the program with the filename
   * replaced by @@. For example: /bin/prog @@
   * @param[in] timeout Timeout for the run of gdb.
   *
   * @return true if no problem.
   */

  static bool RunBtFullRecursive(const std::string& folder,
                                 unsigned int nthread, const std::string& regex,
                                 unsigned int argc, const char* const argv[],
                                 int64_t timeout) CHK;
  /**
   * @brief Get files from a list and run gdb to get the backtrace full.
   *
   * @param[in] list The file that have the list of files.
   * @param[in] nthread Number of parallel of gdb instance.
   * @param[in] argc Number of the arguments
   * @param[in] argv Argument to run the program with the filename
   * replaced by @@. For example: /bin/prog @@
   * @param[in] timeout Timeout for the run of gdb.
   *
   * @return true if no problem.
   */
  static bool RunBtFullList(const std::string& list, unsigned int nthread,
                            unsigned int argc, const char* const argv[],
                            int64_t timeout) CHK;

  /**
   * @brief Server to send messages to subscribers.
   */
  static GdbServer server_;
};

}  // namespace llgc::software::gdb

#endif  // SOFTWARE_GDB_GDB_H_

/* vim:set shiftwidth=2 softtabstop=2 expandtab: */
