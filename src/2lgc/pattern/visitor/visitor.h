/*
 *    Copyright 2018 LE GARREC Vincent
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef PATTERN_VISITOR_VISITOR_H_
#define PATTERN_VISITOR_VISITOR_H_

#include <2lgc/compat.h>
#include <string>

/**
 * @file visitor.h
 *
 * This header is used has base for visitors in the pattern visitor.
 */
namespace llgc::pattern::visitor
{
/**
 * @brief Common class for all visitors.
 */
class BaseVisitor
{
 public:
  // class NumberVisitorVal needs it.
  /**
   * @brief Default constructor.
   */
  BaseVisitor() = default;

  /**
   * @brief In case of some class based on it need a virtual destructor.
   */
  virtual ~BaseVisitor() = default;

#ifndef SWIG
  /**
   * @brief Delete move constructor.
   *
   * @param[in] other The original.
   */
  BaseVisitor(BaseVisitor&& other) = delete;

  /**
   * @brief Delete copy constructor.
   *
   * @param[in] other The original.
   */
  BaseVisitor(BaseVisitor const& other) = default;

  /**
   * @brief Delete the move operator.
   *
   * @param[in] other The original.
   *
   * @return Delete function.
   */
  BaseVisitor& operator=(BaseVisitor&& other) & = delete;

  /**
   * @brief Delete the copy operator.
   *
   * @param[in] other The original.
   *
   * @return Delete function.
   */
  BaseVisitor& operator=(BaseVisitor const& other) & = delete;
#endif  // !SWIG
};

/**
 * @brief Class that is used to force the implementation of the Visit method
 *        with the right arguments.
 *
 * @tparam T The class that the visiting must be implement.
 */
template <class T>
class Visitor
{
 public:
  // class NumberVisitorVal needs it.
  /**
   * @brief Default constructor.
   */
  Visitor() = default;

  /**
   * @brief In case of some class based on it need a virtual destructor.
   */
  virtual ~Visitor() = default;

#ifndef SWIG
  /**
   * @brief Delete move constructor.
   *
   * @param[in] other The original.
   */
  Visitor(Visitor&& other) = delete;

  /**
   * @brief Delete copy constructor.
   *
   * @param[in] other The original.
   */
  Visitor(Visitor const& other) = delete;

  /**
   * @brief Delete the move operator.
   *
   * @param[in] other The original.
   *
   * @return Delete function.
   */
  Visitor& operator=(Visitor&& other) & = delete;

  /**
   * @brief Delete the copy operator.
   *
   * @param[in] other The original.
   *
   * @return Delete function.
   */
  Visitor& operator=(Visitor const& other) & = delete;
#endif  // !SWIG

  /**
   * @brief The method that will use only data and the return will be put in
   *        retun_value.
   *
   * @param data The data used by the visitor.
   * @param return_value the return value generated by SerializeToString.
   *
   * @return false if there is a problem or if SerializeToString failed.
   *         true instead.
   */
  virtual bool Visit(const T& data, std::string* return_value) const CHK = 0;
};

}  // namespace llgc::pattern::visitor

#endif  // PATTERN_VISITOR_VISITOR_H_

/* vim:set shiftwidth=2 softtabstop=2 expandtab: */
