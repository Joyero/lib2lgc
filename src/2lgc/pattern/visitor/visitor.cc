/*
 *    Copyright 2018 LE GARREC Vincent
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** \class llgc::pattern::visitor::BaseVisitor
 * \brief Common class for all visitors.
 *
 *
 * \fn llgc::pattern::visitor::BaseVisitor::BaseVisitor()
 * \brief Default constructor.
 *
 *
 * \fn llgc::pattern::visitor::BaseVisitor::~BaseVisitor()
 * \brief In case of some class based on it need a virtual destructor.
 *
 *
 * \fn llgc::pattern::visitor::BaseVisitor::BaseVisitor(BaseVisitor&& other)
 * \brief Delete move constructor.
 * \param[in] other The original.
 *
 *
 * \fn llgc::pattern::visitor::BaseVisitor::BaseVisitor(BaseVisitor const& other)
 * \brief Delete copy constructor.
 * \param[in] other The original.
 *
 *
 * \fn BaseVisitor& llgc::pattern::visitor::BaseVisitor::operator=(BaseVisitor&& other)
 * \brief Delete the move operator.
 * \param[in] other The original.
 * \return Delete function.
 *
 *
 * \fn BaseVisitor& llgc::pattern::visitor::BaseVisitor::operator=(BaseVisitor const& other)
 * \brief Delete the copy operator.
 * \param[in] other The original.
 * \return Delete function.
 */

/** \class llgc::pattern::visitor::Visitor
 * \brief Class that is used to force the implementation of the Visit method
 *        with the right arguments.
 * \tparam T The class that the visiting must be implement.
 *
 *
 * \fn llgc::pattern::visitor::Visitor::Visitor()
 * \brief Default constructor.
 *
 *
 * \fn llgc::pattern::visitor::Visitor::~Visitor()
 * \brief In case of some class based on it need a virtual destructor.
 *
 *
 * \fn llgc::pattern::visitor::Visitor::Visitor(Visitor&& other)
 * \brief Delete move constructor.
 * \param[in] other The original.
 *
 *
 * \fn llgc::pattern::visitor::Visitor::Visitor(Visitor const& other)
 * \brief Delete copy constructor.
 * \param[in] other The original.
 *
 *
 * \fn Visitor& llgc::pattern::visitor::Visitor::operator=(Visitor&& other)
 * \brief Delete the move operator.
 * \param[in] other The original.
 * \return Delete function.
 *
 *
 * \fn Visitor& llgc::pattern::visitor::Visitor::operator=(Visitor const& other)
 * \brief Delete the copy operator.
 * \param[in] other The original.
 * \return Delete function.
 *
 *
 * \fn bool llgc::pattern::visitor::Visitor::Visit(const T& data, std::string* return_value) const
 * \brief The method that will use only data and the return will be put in
 *        retun_value.
 * \param data The data used by the visitor.
 * \param return_value the return value generated by SerializeToString.
 * \return false if there is a problem or if SerializeToString failed.
 *         true instead.
 */

/* vim:set shiftwidth=2 softtabstop=2 expandtab: */
