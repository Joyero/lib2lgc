/* Copyright [2017] LE GARREC Vincent
 *
 * This file is part of 2LGC.
 *
 * 2LGC is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * 2LGC is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with 2LGC. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef VISITOR_H_
#define VISITOR_H_

#include "config.h"

// C++ system
#include <string>

/**
 * @file
 *
 * This header is used has base for visitors in the pattern visitor.
 */
namespace pattern {
namespace visitor {

/**
 * @brief Common class for all visitors.
 */
class BaseVisitor {
 public:
  /**
   * @brief In case of some class based on it need a virtual destructor.
   */
  virtual ~BaseVisitor() {}
};

/**
 * @brief Class that is used to force the implementation of the Visit method
 *        with the right arguments.
 *
 * @tparam T The class that the visiting must be implement.
 */
template <class T>
class Visitor {
 public:
  /**
   * @brief In case of some class based on it need a virtual destructor.
   */
  virtual ~Visitor() {}
  /**
   * @brief The method that will use only data and the return will be put in
   *        retun_value.
   *
   * @param data The data used by the visitor.
   * @param return_value the return value generated by SerializeToString.
   *
   * @return false if there is a problem or if SerializeToString failed.
   *         true instead.
   */
  virtual bool Visit(const T &data, std::string *return_value) const CHK = 0;
};

}  // namespace visitor
}  // namespace pattern

#endif  // VISITOR_H_
