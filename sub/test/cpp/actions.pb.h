// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actions.proto

#ifndef PROTOBUF_actions_2eproto__INCLUDED
#define PROTOBUF_actions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace msg {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Action_Test;
class Action_TestDefaultTypeInternal;
extern Action_TestDefaultTypeInternal _Action_Test_default_instance_;
class Actions;
class ActionsDefaultTypeInternal;
extern ActionsDefaultTypeInternal _Actions_default_instance_;
}  // namespace msg

namespace msg {

namespace protobuf_actions_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_actions_2eproto

// ===================================================================

class Action_Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.Action.Test) */ {
 public:
  Action_Test();
  virtual ~Action_Test();

  Action_Test(const Action_Test& from);

  inline Action_Test& operator=(const Action_Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action_Test(Action_Test&& from) noexcept
    : Action_Test() {
    *this = ::std::move(from);
  }

  inline Action_Test& operator=(Action_Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_Test& default_instance();

  static inline const Action_Test* internal_default_instance() {
    return reinterpret_cast<const Action_Test*>(
               &_Action_Test_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Action_Test* other);
  void Swap(Action_Test* other);
  friend void swap(Action_Test& a, Action_Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action_Test* New() const PROTOBUF_FINAL { return New(NULL); }

  Action_Test* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action_Test& from);
  void MergeFrom(const Action_Test& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action_Test* other);
  protected:
  explicit Action_Test(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.Action.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct protobuf_actions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  enum DataCase {
    kTest = 1,
    DATA_NOT_SET = 0,
  };

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Action* other);
  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const PROTOBUF_FINAL { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action* other);
  protected:
  explicit Action(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Action_Test Test;

  // accessors -------------------------------------------------------

  // .msg.Action.Test test = 1;
  bool has_test() const;
  void clear_test();
  static const int kTestFieldNumber = 1;
  private:
  void _slow_mutable_test();
  void _slow_set_allocated_test(
      ::google::protobuf::Arena* message_arena, ::msg::Action_Test** test);
  ::msg::Action_Test* _slow_release_test();
  public:
  const ::msg::Action_Test& test() const;
  ::msg::Action_Test* mutable_test();
  ::msg::Action_Test* release_test();
  void set_allocated_test(::msg::Action_Test* test);
  ::msg::Action_Test* unsafe_arena_release_test();
  void unsafe_arena_set_allocated_test(
      ::msg::Action_Test* test);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:msg.Action)
 private:
  void set_has_test();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::msg::Action_Test* test_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_actions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Actions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.Actions) */ {
 public:
  Actions();
  virtual ~Actions();

  Actions(const Actions& from);

  inline Actions& operator=(const Actions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actions(Actions&& from) noexcept
    : Actions() {
    *this = ::std::move(from);
  }

  inline Actions& operator=(Actions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Actions& default_instance();

  static inline const Actions* internal_default_instance() {
    return reinterpret_cast<const Actions*>(
               &_Actions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Actions* other);
  void Swap(Actions* other);
  friend void swap(Actions& a, Actions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actions* New() const PROTOBUF_FINAL { return New(NULL); }

  Actions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Actions& from);
  void MergeFrom(const Actions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Actions* other);
  protected:
  explicit Actions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .msg.Action action = 1;
  int action_size() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::msg::Action& action(int index) const;
  ::msg::Action* mutable_action(int index);
  ::msg::Action* add_action();
  ::google::protobuf::RepeatedPtrField< ::msg::Action >*
      mutable_action();
  const ::google::protobuf::RepeatedPtrField< ::msg::Action >&
      action() const;

  // @@protoc_insertion_point(class_scope:msg.Actions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::msg::Action > action_;
  mutable int _cached_size_;
  friend struct protobuf_actions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Action_Test

// -------------------------------------------------------------------

// Action

// .msg.Action.Test test = 1;
inline bool Action::has_test() const {
  return data_case() == kTest;
}
inline void Action::set_has_test() {
  _oneof_case_[0] = kTest;
}
inline void Action::clear_test() {
  if (has_test()) {
    if (GetArenaNoVirtual() == NULL) {
      delete data_.test_;
    }
    clear_has_data();
  }
}
inline  const ::msg::Action_Test& Action::test() const {
  // @@protoc_insertion_point(field_get:msg.Action.test)
  return has_test()
      ? *data_.test_
      : ::msg::Action_Test::default_instance();
}
inline ::msg::Action_Test* Action::mutable_test() {
  if (!has_test()) {
    clear_data();
    set_has_test();
    data_.test_ = 
      ::google::protobuf::Arena::CreateMessage< ::msg::Action_Test >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:msg.Action.test)
  return data_.test_;
}
inline ::msg::Action_Test* Action::release_test() {
  // @@protoc_insertion_point(field_release:msg.Action.test)
  if (has_test()) {
    clear_has_data();
    if (GetArenaNoVirtual() != NULL) {
      ::msg::Action_Test* temp = new ::msg::Action_Test(*data_.test_);
      data_.test_ = NULL;
      return temp;
    } else {
      ::msg::Action_Test* temp = data_.test_;
      data_.test_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_test(::msg::Action_Test* test) {
  clear_data();
  if (test) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(test) == NULL) {
      GetArenaNoVirtual()->Own(test);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(test)) {
      ::msg::Action_Test* new_test = 
          ::google::protobuf::Arena::CreateMessage< ::msg::Action_Test >(
          GetArenaNoVirtual());
      new_test->CopyFrom(*test);
      test = new_test;
    }
    set_has_test();
    data_.test_ = test;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Action.test)
}
inline  ::msg::Action_Test* Action::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Action.test)
  if (has_test()) {
    clear_has_data();
    ::msg::Action_Test* temp = data_.test_;
    data_.test_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void Action::unsafe_arena_set_allocated_test(::msg::Action_Test* test) {
  clear_data();
  if (test) {
    set_has_test();
    data_.test_ = test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Action.test)
}

inline bool Action::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Action::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Action::DataCase Action::data_case() const {
  return Action::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Actions

// repeated .msg.Action action = 1;
inline int Actions::action_size() const {
  return action_.size();
}
inline void Actions::clear_action() {
  action_.Clear();
}
inline const ::msg::Action& Actions::action(int index) const {
  // @@protoc_insertion_point(field_get:msg.Actions.action)
  return action_.Get(index);
}
inline ::msg::Action* Actions::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Actions.action)
  return action_.Mutable(index);
}
inline ::msg::Action* Actions::add_action() {
  // @@protoc_insertion_point(field_add:msg.Actions.action)
  return action_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::msg::Action >*
Actions::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:msg.Actions.action)
  return &action_;
}
inline const ::google::protobuf::RepeatedPtrField< ::msg::Action >&
Actions::action() const {
  // @@protoc_insertion_point(field_list:msg.Actions.action)
  return action_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_actions_2eproto__INCLUDED
