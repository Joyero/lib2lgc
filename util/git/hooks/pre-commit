#!/bin/sh
#
#    Copyright 2018 LE GARREC Vincent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# To use this pre-commit, run 'git config core.hooksPath util/git/hooks/'

if git rev-parse --verify HEAD >/dev/null 2>&1
then
 against=HEAD
else
 # Initial commit: diff against an empty tree object
 against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

changed_files_cc=$(git diff-index --cached $against | \
 grep -E '[MA](\s)+.*\.cc$' | cut -f 2)
changed_files_h=$(git diff-index --cached $against | \
 grep -E '[MA](\s)+.*\.h$' | cut -f 2)

tmp_dir=$(mktemp -d -t llgc.XXXXXXXXXX)

cmake -B$tmp_dir -H. -DIWYU=1 -DWALL=1
make -C $tmp_dir git_pre_commit

if [ -n "$changed_files_h" ]
then
# cpplint
 echo -n cpplint.py *.h check...
 cpplint.py --root=src/2lgc --filter=-runtime/printf,-readability/braces,-whitespace/braces,-build/include_what_you_use,-whitespace/newline,-build/c++11,-build/include_order,-readability/nolint,-whitespace/line_length,-build/include,-build/include,-whitespace/parens,-runtime/casting $changed_files_h
 if [ $? -eq 1 ]
 then
  echo " failed": $changed_files_h
  exit 1
 fi
 echo " done"
fi

if [ -n "$changed_files_cc" ]
then
# clang-format
 echo -n clang-format check...
 for file_cc in $changed_files_cc
 do
  md5orig=$(md5sum $file_cc | cut -f 1 -d " ")
  md5format=$(clang-format -style='{BasedOnStyle: google, BreakBeforeBraces: Custom, BraceWrapping: { AfterClass: true, AfterControlStatement: true, AfterEnum : true, AfterFunction : true, AfterNamespace : true, AfterObjCDeclaration: true, AfterStruct : true, AfterUnion : true, BeforeCatch : true, BeforeElse : true, IndentBraces : false }, ReflowComments: false, DerivePointerAlignment: false, PointerAlignment: Right }' $file_cc | md5sum | cut -f 1 -d " ")
  if [ "$md5orig" != "$md5format" ]; then
   echo " failed": $file_cc : $md5orig $md5format
   exit 1
  fi
 done
 echo " done"

# cpplint
 echo -n cpplint.py *.cc check...
 cpplint.py --root=src/2lgc --filter=-runtime/printf,-readability/braces,-whitespace/braces,-build/include_what_you_use,-whitespace/newline,-build/c++11,-build/include_order,-readability/nolint,-whitespace/line_length,-build/include,-build/include,-whitespace/parens,-runtime/casting $changed_files_cc
 if [ $? -eq 1 ]
 then
  echo " failed": $changed_files_cc
  exit 1
 fi
 echo " done"

# cppcheck. From https://github.com/danmar/cppcheck/blob/master/tools/git-pre-commit-cppcheck
 # -I ./src for library source.
 # -I $tmp_dir/tests for tests.
 echo -n cppcheck check...
 cppcheck -v --error-exitcode=1 -I ./src -I $tmp_dir/src -I $tmp_dir/tests --enable=warning,style,portability,information,performance --inconclusive --std=c++14 --quiet -DGOOGLE_PROTOBUF_VERSION=9999999 --suppress=passedByValue $changed_files_cc
 if [ $? -eq 1 ]
 then
  echo " failed": $changed_files_cc
  exit 1
 fi
 echo " done"

# IWYU: need files generated with cmake and make
 echo -n include-what-you-use check...
 echo parallel include-what-you-use -Xiwyu --mapping_file=./util/iwyu/mapping.imp -I ./src -I $tmp_dir/src -I $tmp_dir/tests `pwd`/{} -std=gnu++17
 result=$(echo "$changed_files_cc" | parallel include-what-you-use -Xiwyu --mapping_file=./util/iwyu/mapping.imp -isystem ./src -isystem $tmp_dir/src -isystem $tmp_dir/src/2lgc/poco -isystem $tmp_dir/tests `pwd`/{} -std=gnu++17 2>&1)
 if [[ $result = *"should remove these lines"* ]]
 then
  echo " failed": $changed_files_cc
  echo "$result"
  exit 1
 fi
 echo " done"
 echo "LOG : $result"

 echo -n include-what-you-use -DTEMPLATE_CLASS=1 check...
 echo parallel include-what-you-use -Xiwyu --mapping_file=./util/iwyu/mapping.imp -I ./src -I $tmp_dir/src -I $tmp_dir/tests `pwd`/{} -std=gnu++17
 result=$(echo "$changed_files_cc" | parallel include-what-you-use -Xiwyu --mapping_file=./util/iwyu/mapping.imp -isystem ./src -isystem $tmp_dir/src -isystem $tmp_dir/src/2lgc/poco -isystem $tmp_dir/tests -DTEMPLATE_CLASS=1 `pwd`/{} -std=gnu++17 2>&1)
 if [[ $result = *"should remove these lines"* ]]
 then
  echo " failed": $changed_files_cc
  echo "$result"
  exit 1
 fi
 echo " done"
 echo "LOG : $result"

# clang-tidy: need files generated with cmake and make
 echo -n clang-tidy check...
 result=$(echo "$changed_files_cc" | parallel clang-tidy -header-filter='^'`pwd`'/.*' -checks='*,-llvm-include-order,-llvm-header-guard,-fuchsia-default-arguments,-clang-diagnostic-covered-switch-default,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-hicpp-no-array-decay,-clang-diagnostic-c++98-c++11-c++14-compat,-fuchsia-overloaded-operator,-google-readability-namespace-comments,-llvm-namespace-comment,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-fuchsia-virtual-inheritance' -p=$tmp_dir `pwd`/{} 2>&1)
 if [[ $result = *": warning: "* ]]
 then
  echo " failed": $changed_files_cc
  echo "$result"
  exit 1
 fi
 echo " done"
fi

exit 0
